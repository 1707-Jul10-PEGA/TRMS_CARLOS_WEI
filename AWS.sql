/*DROP TABLE USER_TABLE CASCADE CONSTRAINTS;
DROP TABLE EVENT_TYPE CASCADE CONSTRAINTS;
DROP TABLE GRADING_FORMATS CASCADE CONSTRAINTS;
DROP TABLE GRADE_TABLE CASCADE CONSTRAINTS;
DROP TABLE PRESENTATION CASCADE CONSTRAINTS;
DROP TABLE FORMS CASCADE CONSTRAINTS;
DROP TABLE LOGIN_INFORMATION CASCADE CONSTRAINTS;*/

DROP SEQUENCE USER_SEQ;
DROP SEQUENCE FORMS_SEQ;
DROP SEQUENCE GRADE_SEQ;
DROP SEQUENCE PRESENTATION_SEQ;

CREATE SEQUENCE USER_SEQ MINVALUE 1 MAXVALUE 999999999999999999999999999999999999999 INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE FORMS_SEQ MINVALUE 1 MAXVALUE 999999999999999999999999999999999999999 INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE GRADE_SEQ MINVALUE 1 MAXVALUE 999999999999999999999999999999999999999 INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE PRESENTATION_SEQ MINVALUE 1 MAXVALUE 999999999999999999999999999999999999999 INCREMENT BY 1 START WITH 1;

CREATE TABLE USER_TABLE(
    USERID NUMBER,
    FIRSTNAME VARCHAR2(25) NOT NULL,
    LASTNAME VARCHAR2(25) NOT NULL,
    EMAIL VARCHAR2(50),
    DEPARTMENT VARCHAR2(20) NOT NULL,
    POSITION VARCHAR2(30) NOT NULL,
    SUPERVISOR NUMBER,
    CONSTRAINT PK_USERID PRIMARY KEY (USERID),
    CONSTRAINT FK_SUPERVISOR FOREIGN KEY (SUPERVISOR) REFERENCES USER_TABLE);

CREATE TABLE EVENT_TYPE(
    EVENT_ID NUMBER,
    EVENT_NAME VARCHAR2(40),
    R_PERCENTAGE NUMBER,
    CONSTRAINT PK_EVENT_ID PRIMARY KEY (EVENT_ID));
    
CREATE TABLE GRADING_FORMATS(
    GRADE_FORMATID NUMBER,
    GRADE_FORMAT VARCHAR2(20),
    CONSTRAINT PK_GRADE_FORMATID PRIMARY KEY(GRADE_FORMATID));
    
CREATE TABLE GRADE_TABLE(
    GRADEID NUMBER,
    USERID NUMBER,
    GRADE VARCHAR2(10),
    GRADE_FORMATID NUMBER,
    CONSTRAINT PK_GRADEID PRIMARY KEY (GRADEID),
    CONSTRAINT FK_G_USERID FOREIGN KEY (USERID) REFERENCES USER_TABLE,
    CONSTRAINT FK_GRADE_FORMATID FOREIGN KEY (GRADE_FORMATID) REFERENCES GRADING_FORMATS (GRADE_FORMATID));

CREATE TABLE PRESENTATION(
    PRESENTATIONID NUMBER,
    DESCRIPTION VARCHAR2(255),
    USERID NUMBER,
    SATIFACTORY CHAR(1),
    CONSTRAINT PK_PRESENTATIONID PRIMARY KEY (PRESENTATIONID),
    CONSTRAINT FK_USERID FOREIGN KEY (USERID) REFERENCES USER_TABLE (USERID));
    
CREATE TABLE FORMS(
    FORMID NUMBER,
    USERID NUMBER NOT NULL,
    EDATE VARCHAR(20),
    ETIME VARCHAR(20),
    ELOCATION VARCHAR2(50),
    DESCRIPTION VARCHAR2(255),
    COST NUMBER,
    GRADING_FORMAT NUMBER,
    EVENT_TYPEID NUMBER,
    JUSTIFICATION VARCHAR2(255),
    CONSTRAINT PK_FORMID PRIMARY KEY (FORMID),
    CONSTRAINT FK_USERFORMID FOREIGN KEY (USERID) REFERENCES USER_TABLE (USERID),
    CONSTRAINT FK_EVENTFORMID FOREIGN KEY (EVENT_TYPEID) REFERENCES EVENT_TYPE (EVENT_ID),
    CONSTRAINT FK_GRADING_FORMAT FOREIGN KEY (GRADING_FORMAT) REFERENCES GRADING_FORMATS (GRADE_FORMATID));
    
CREATE TABLE LOGIN_INFORMATION (
    USERID NUMBER NOT NULL,
    USERNAME VARCHAR2(20) NOT NULL,
    PASSWORD VARCHAR2(20) NOT NULL, 
    CONSTRAINT LOGIN_INFORMATION_FK1 FOREIGN KEY (USERID) REFERENCES USER_TABLE(USERID));
    
INSERT INTO EVENT_TYPE VALUES (1, 'University Courses', 80);
INSERT INTO EVENT_TYPE VALUES (2, 'Seminars', 60);
INSERT INTO EVENT_TYPE VALUES (3, 'Certification Preparation Classes', 75);
INSERT INTO EVENT_TYPE VALUES (4, 'Certification', 100);
INSERT INTO EVENT_TYPE VALUES (5, 'Technical Training', 90);
INSERT INTO EVENT_TYPE VALUES (6, 'Other', 30);

INSERT INTO GRADING_FORMATS VALUES (1, 'Letter Grade');
INSERT INTO GRADING_FORMATS VALUES (2, 'Percentage Grade');
INSERT INTO GRADING_FORMATS VALUES (3, 'Pass/Fail');

CREATE OR REPLACE TRIGGER NEW_USER_TRIG
    BEFORE INSERT ON USER_TABLE
    FOR EACH ROW
    BEGIN
        SELECT USER_SEQ.NEXTVAL INTO :new.USERID FROM DUAL;
    END;
    /
    
CREATE OR REPLACE TRIGGER NEW_FORMS_TRIG
    BEFORE INSERT ON FORMS
    FOR EACH ROW
    BEGIN
        SELECT FORMS_SEQ.NEXTVAL INTO :new.FORMID FROM DUAL;
    END;
    /
    
CREATE OR REPLACE TRIGGER NEW_GRADE_TRIG
    BEFORE INSERT ON GRADE_TABLE
    FOR EACH ROW
    BEGIN
        SELECT GRADE_SEQ.NEXTVAL INTO :new.GRADEID FROM DUAL;
    END;
    /
    
CREATE OR REPLACE TRIGGER NEW_PRESENTATION_TRIG
    BEFORE INSERT ON PRESENTATION
    FOR EACH ROW
    BEGIN
        SELECT PRESENTATION_SEQ.NEXTVAL INTO :new.PRESENTATIONID FROM DUAL;
    END;
    /
    
COMMIT;